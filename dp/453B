    #ifdef _MSC_VER
    #define _CRT_SECURE_NO_WARNINGS
    #endif
    //#define DEBUG
     
     
    #include <iostream>
    #include <algorithm>
    #include <vector>
    #include <queue>
    #include <cstring>
    #include <iomanip>
    #include <numeric>
    #include <string>
    #include <cmath>
    #include <math.h>
    #include <set>
    #include <map>
    #include <stack>
    #include <bitset>
    #include <fstream>
    #include <chrono>
    #include <random>
    #include <fstream>
    #define es ios::sync_with_stdio(false);cin.tie(nullptr);
    //#define x first
    //#define y second
    #define all(v) (v).begin(),(v).end()
    #define prec(i) cout << std::fixed << std::setprecision(i)
    #define randomizer mt19937 rng(chrono::steady_clock::now().time_since_epoch().count())
    #define mst(v,k) memset((v),(k),sizeof(v));
     
     
    using namespace std;
    using ll = long long;
    using ull = unsigned long long;
    using pii = pair<int, int>;
    using pll = pair<ll, ll>;
    using pdd = pair<double, double>;
    const int maxik = 60;
    const int maxN = 30;
    const int INF = 0x3f3f3f3f;
    const ll INFll = 1e18;
    const int modik = 1e9 + 7;
    const int tight = 2;
    const int hash2 = 11777;
    const int hash1 = 12269;
    const double eps = 1e-6;
    const int modik2 = 998'244'353;
    const int generatorModik2 = 3;
    const double PI = acos(-1.);
    #ifdef DEBUG
    fstream in("C:/Temp/input.txt", ios::in);
    fstream out("C:/Temp/output.txt", ios::out | ios::trunc);
    #define cin in
    #define cout out
    #endif // DEBUG 
     
    const vector<int> pr{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59};
    const int prNumber = pr.size();
    vector<int> prMask;
    vector<int> val,res;
    vector<vector<int>> dp,num;
    int ans = INF;
    int answermask = 0;
    int n;
    int main()
    {
    	es;
    	prMask.resize(maxik, 0);
    	for(int i=0;i<maxik;i++)
    	{
    		for(int j=0;j<prNumber;j++)
    		{
    			if(i%pr[j]==0)
    			{
    				prMask[i] |= 1ll << j;
    			}
    		}
    	}
    	cin >> n;
    	val.resize(n + 1);
    	for(int i=1;i<=n;i++)
    	{
    		cin >> val[i];
    	}
    	dp.resize(n + 1, vector<int>(1 << prNumber, INF));
    	num.resize(n + 1, vector<int>(1 << prNumber, 0));
    	dp[0][0] = 0;
    	for(int i=1;i<=n;i++)
    	{
    		for(int j=0;j<(1<<prNumber);j++)
    		{
    			for(int k=1;k<maxik;k++)
    			{
    				if(prMask[k]&j)
    				{
    					continue;
    				}
    				if(dp[i][prMask[k]|j]>dp[i-1][j]+abs(val[i]-k))
    				{
    					num[i][prMask[k] | j] = k;
    					dp[i][prMask[k] | j] = dp[i - 1][j] + abs(val[i] - k);
    				}
    			}
    		}
    	}
    	
    	for(int i=0;i<1<<prNumber;i++)
    	{
    		if(dp[n][i]<ans)
    		{
    			ans = dp[n][i];
    			answermask = i;
    		}
    	}
    	for(int i=n;i>=1;i--)
    	{
    		res.push_back(num[i][answermask]);
    		answermask ^= prMask[num[i][answermask]];
    	}
    	reverse(all(res));
    	for(auto v:res)
    	{
    		cout << v << " ";
    	}
    	return 0;
    }
